#!/usr/bin/env php
<?php

declare(strict_types=1);

error_reporting(-1);

use App\Cli\InputOption;
use App\Cli\InputOptions;
use App\Cli\Output;
use App\Cli\Terminal;
use App\Exception\BadCliUsageException;
use App\Parser\Csv\Options;
use App\Parser\Csv\Parser;
use App\Parser\Csv\Schema;

if ('cli' !== PHP_SAPI) {
    fwrite(STDERR, 'This script should be run only via "cli".' . PHP_EOL);

    Terminal::terminate(Terminal::BAD_SAPI);
}

require dirname(__DIR__) . '/vendor/autoload.php';

function usage(): void
{
    $usage = <<<EOF
csv2json [options] <csv_file_path>
  [options]
    --desc <file>: [REQUIRED] Description file for field types.
    --fields "field1,field2":
             * List of fields to output.
             * Can be provided multiple times.
    --aggregate <field>: Aggregate the objects using this field.
    --pretty: Pretty print the JSON output
EOF;

    Output::writeln('Usage:', 0, STDERR);
    Output::writeln($usage, 1, STDERR);

    Terminal::terminate(Terminal::INVALID_USAGE);
}

try {
    $inputOptions = new InputOptions([
        new InputOption(null, 'fields', InputOption::MODE_REQUIRED + InputOption::MODE_ARRAY),
        new InputOption(null, 'aggregate', InputOption::MODE_REQUIRED + InputOption::MODE_STRING),
        new InputOption(null, 'desc', InputOption::MODE_REQUIRED + InputOption::MODE_FILE),
        new InputOption(null, 'pretty', InputOption::MODE_BOOL),
    ]);

    // TODO: cannot accept args. Use a custom function ?
    $optind = null;

    $cliParams = getopt(
        $inputOptions->dumpShortNameSyntax(),
        $inputOptions->dumpLongNameSyntax(),
        $optind
    );

    // TODO: Drawback: the only arg supported must be at the end.
    if (($argc - $optind) !== 1) {
        usage();
    }

    $defaults  = [
        'fields'    => null,
        'aggregate' => null,
        'pretty'    => false,
    ];
    $cliParams += $defaults;
    try {
        $cliParams = $inputOptions->sanitizeRawValues($cliParams);
    } catch (BadCliUsageException $badCliUsageException) {
        Output::writeln($badCliUsageException->getMessage() . PHP_EOL, 0, STDERR);

        usage();
    }

    $required = [
        'desc' => true,
    ];

    if (array_intersect_key($cliParams, $required) === []) {
        Output::writeln('--desc is required', 0, STDERR);

        Terminal::terminate(Terminal::INVALID_USAGE);
    }

    $csvFilePath    = realpath($argv[$optind]);
    $schemaFilePath = realpath($cliParams['desc']);

    $schema = Schema::fromFile($schemaFilePath);

    $options              = new Options();
    $options->prettify    = $cliParams['pretty'];
    $options->aggregateBy = $cliParams['aggregate'];

    $options->fields = $schema->fields;
    if (
        array_key_exists('fields', $cliParams) === true
        && null !== $cliParams['fields']
    ) {
        $options->fields = $schema->listFieldsFrom($cliParams['fields']);
    }

    $parsedCsv = (new Parser())($csvFilePath, $schema, $options);

    $jsonOptions = JSON_THROW_ON_ERROR;
    if (true === $options->prettify) {
        $jsonOptions |= JSON_PRETTY_PRINT;
    }

    Output::writeln(json_encode($parsedCsv, $jsonOptions, 512), 0, STDOUT);
} catch (Throwable $throwable) {
    Output::writeln('An error occured:', 0, STDERR);
    Output::writeln('> ' . $throwable->getMessage(), 2, STDERR);

    Terminal::terminate(Terminal::UNKNOWN_ERROR);
}

Terminal::terminate(Terminal::SUCCESS);
